#!/usr/bin/env python

"""
    get wilmaa stream and store it into 2 buffer files (with defined length)
    """

__author__ = 'cooper'

import os
import wwwc.misc as misc
import logging as log
import wwwc.config as config
import wwwc.streamhandler as streamhandler
import wwwc.channelhandler as channelhandler


def cleanup_tmpdir(tmppath):
    # TODO add fifoname to configfile
    fifoname = os.path.join(tmppath, 'streamfifo')
    try:
        os.unlink(fifoname)
    except:
        pass


def get_uid(configfile):
    from ConfigParser import ConfigParser
    config = ConfigParser()
    config.read(configfile)
    try:
        return config.get('userdata', 'user_id')
    except:
        return


def main():
    """main"""
    import wwwc.sessionhandler as sessionhandler
    configfile = '/usr/local/wwwc/config/default_config.ini'

    opts, args = config.get_cli_options()

    # configure logger
    # reset old log settings
    if log.root:
        del log.root.handlers[:]

    formatstring = '[%(levelname)s]: %(message)s'
    if opts.loglevel:
        loglevel = log.getLevelName(opts.loglevel.upper())
    else:
        loglevel = log.WARN

    log.basicConfig(format=formatstring, level=loglevel)

    # parse config
    if opts.config_file:
        configfile = opts.config_file

    if not os.path.isfile(configfile):
        msg = 'config file did not exist (' + configfile + ')'
        misc.die(-1, msg)

    session = config.create_stream_session(configfile)

    tmppath = session.get('tmp_path')
    if not tmppath:
        import tempfile
        tmppath = tempfile.mkdtemp()

    try:
        os.mkdir(tmppath)
    except:
        pass
    # cleanup the tmpdir
    cleanup_tmpdir(tmppath)

    session.set('tmppath', tmppath)

    # create userID cookie and add it to the config
    uid = get_uid(configfile)
    uid_ck = sessionhandler.create_uid_cookie(uid, session)
    session.add_cookie(uid_ck)

    channel_list = channelhandler.get_channel_list(session)

    if opts.channel:
        channel = opts.channel
        channel_url = channelhandler.get_url_from_channel(channel_list, channel)
    else:
        channel_url = channelhandler.select_channel(channel_list)

    session.set('channel', channel_url)

    rc, msg = streamhandler.dump_to_file(session)

    if int(rc) < 0:
        misc.die(rc, msg)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('Abort by user.')

# vim: ft=py:tabstop=4:et